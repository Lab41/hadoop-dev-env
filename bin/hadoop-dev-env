#!/usr/bin/env python

import sys
import os
import json
import pprint

VERSION_MAP = {
    'cdh4.4.0': {
        'hadoop': 'hadoop-2.0.0-cdh4.4.0',
        'hbase': 'hbase-0.94.6-cdh4.4.0',
        'zookeeper': 'zookeeper-3.4.5-cdh4.4.0',
    },
    'cdh5.0.0': {
        'cloudera search': 'cloudera-search-1.0.0-cdh5.0.0',
        'hadoop': 'hadoop-2.3.0-cdh5.0.0',
        'hbase': 'hbase-0.96.1.1-cdh5.0.0',
        'solr': 'solr-4.4.0-cdh5.0.0',
        'zookeeper': 'zookeeper-3.4.5-cdh5.0.0',
    },
}

def load_configs():
    path = os.path.expanduser(os.path.join('~', '.hadoop-clusters'))
    if os.path.exists(path):
        with open(path) as f:
            return json.load(f)
    else:
        return {}

def setup_hadoop(config, env):
    env['HADOOP_CONF_DIR'] = os.path.join(config['config_dir'], 'hadoop-conf')
    env['YARN_CONF_DIR'] = os.path.join(config['config_dir'], 'yarn-conf')

    env['HADOOP_HOME'] = os.path.join(config['root_dir'], config['versions']['hadoop'])

    env['PATH'] = [
        os.path.join(env['HADOOP_HOME'], 'bin'),
        os.path.join(env['HADOOP_HOME'], 'sbin'),
    ] + env['PATH']

def setup_hbase(config, env):
    env['HBASE_HOME'] = home = os.path.join(config['root_dir'], config['versions']['hbase'])

    env['PATH'] = [
        os.path.join(env['HBASE_HOME'], 'bin'),
        os.path.join(env['HBASE_HOME'], 'sbin'),
    ] + env['PATH']

def setup_cloudera_search(config, env):
    env['SOLR_HOME'] = os.path.join(config['root_dir'], config['versions']['solr'])
    env['SOLR_ZK_ENSEMBLE'] = config['zk_ensemble']
    env['SOLR_HDFS_HOME'] = config['hdfs_home']

    env['PATH'] = [
        os.path.join(env['SOLR_HOME'], 'bin'),
        os.path.join(env['SOLR_HOME'], 'sbin'),
    ] + env['PATH']

def setup_zookeeper(config, env):
    env['ZOOKEEPER_HOME'] = os.path.join(config['root_dir'], config['versions']['zookeeper'])

    env['PATH'] = [
        os.path.join(env['ZOOKEEPER_HOME'], 'bin'),
        os.path.join(env['ZOOKEEPER_HOME'], 'sbin'),
    ] + env['PATH']

def main(argv):
    if len(argv) < 3:
        print >> sys.stderr, 'please specify a config and command'
        return 1

    hadoop_config_name = argv[1]
    command = argv[2:]

    configs = load_configs()

    try:
        config = configs[hadoop_config_name]
    except KeyError:
        print >> sys.stderr, 'unknown config', hadoop_config
        return 1

    try:
        version = config['version']
    except KeyError:
        print >> sys.stderr, 'version not set in config'
        return 1

    try:
        config['config_dir'] = os.path.expanduser(config['config_dir'])
    except KeyError:
        print >> sys.stderr, 'config_dir not set in config'
        return 1

    try:
        config['versions'] = VERSION_MAP[version]
    except KeyError:
        print >> sys.stderr, 'unknown version', version

    config['root_dir'] = os.path.join(os.path.dirname(argv[0]), '..', 'versions')

    if not os.path.exists(config['root_dir']):
        print >> sys.stderr, 'root directory does not exist', config['root_dir']
        return 1

    env = dict(os.environ)
    env['PATH'] = env.get('PATH', '').split(os.pathsep)

    for lib in config.get('libs', []):
        if lib == 'hadoop':
            setup_hadoop(config, env)
        elif lib == 'hbase':
            setup_hbase(config, env)
        elif lib == 'cloudera-search':
            setup_cloudera_search(config, env)
        elif lib == 'zookeeper':
            setup_zookeeper(config, env)
        else:
            print >> sys.stderr, 'unknown library', lib
            return 1

    env['PATH'] = os.pathsep.join(env['PATH'])

    os.execvpe(command[0], command, env)

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
